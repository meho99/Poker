{"version":3,"sources":["store/consts.js","store/addStoreItems.js","store/whoWon.js","store/addRandom.js","store/reducers.js","components/button.js","pages/buttonPanel/buttonPanelComponent.js","store/actions.js","pages/buttonPanel/buttonPanelHooks.js","pages/buttonPanel/buttonPanelContainer.js","components/card.js","components/cardsList.js","pages/board/boardComponent.js","pages/board/boardContainer.js","components/textLabel.js","components/inputLabel.js","pages/border/borderComponent.js","pages/border/borderContainer.js","index.js","store/index.js","App.js"],"names":["ACTIONS","CardTypes","FiguresPower","generateCardsPath","cardName","generateSourceTextures","cardsNumber","sourceTexturesArray","i","ifSame","player1Card1","player1Card2","player2Card1","player2Card2","won","betterCardPlayer1","worstCardPlayer1","betterCardPlayer2","worstCardPlayer2","addRandom","player","bot","board","repeat","randomCard","randomType","Math","floor","random","randomFigure","j","length","x","commonCards","type","card","player1","player2","figure1","figure2","player1Figure1","player1Figure2","player2Figure1","player2Figure2","whoWon","checkFigures","handPush","hand","repeatedFigures","power","handLength","fig1","fig2","repeatedCards","pom","cardsNumbers","map","item","l","k","push","quantity","figure","street","nextCard","nexterCard","color","store","cardNames","cards","buttons","ico","addStore","defaultState","boardCards","player1Cards","player2Cards","playersIco","playerCash","playerMinus","pool","buttonsColors","buttonsNames","round","inputNames","randPlayer","randBot","randBorad","poolRounds","buttonsName","addPool","draft","prize","botPoolAdd","reducer","handleActions","state","payload","produce","difference","samePool","newRound","includes","value","useStyles","makeStyles","button","marginLeft","textAlign","fontSize","width","fontFamily","Buton","text","onClick","classes","Button","className","position","right","backgroundColor","float","boxShadow","borderRadius","buttonPlace","top","buttonPass","ButtonPanelComponent","buttonPlaceName","ChangeRound","ChangeButton","PassButton","Grid","actions","changeButton","createAction","data","changeRound","changePool","passRound","useChangeRound","dispatch","useDispatch","useChangeButton","usePassButton","ButtonPanelContainer","reduxProps","useSelector","hooksProps","image","minWidth","Card","source","src","alt","CardsComponent","storeCards","container","direction","justify","alignItems","xs","val","index","key","height","left","flexGrow","flexWrap","display","cardsContainer","maxHeight","DefaultGrid","children","BoardComponent","listPlayer2","listPlayer1","BoardContainer","textPool","textDebt","root","maxWidth","marginTop","marginBottom","TextLabel","value2","Typography","InputLabel","changepool","addValue","sm","player1Cash","bottom","player2Cash","poolAdd","player1Icon","player2Icon","BorderComponent","player1Debt","player2Debt","playerIconSrc1","playerIconSrc2","kay","BorderContainer","borderProps","date","useChangePool","rootElement","document","getElementById","ReactDOM","render","createStore","composeWithDevTools","applyMiddleware"],"mappings":"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","file":"static/js/main.cfbb2e8d.chunk.js","sourcesContent":["export const ACTIONS = {\r\n    CHANGE_BUTTON: 'change_button',\r\n    CHANGE_ROUND: 'change_round',\r\n    CHANGE_POOL: 'change_pool',\r\n    PASS_ROUND: 'pass_round'\r\n}\r\n\r\nexport const CardTypes = [\r\n    \"Spades\",\r\n    \"Clubs\",\r\n    \"Diamonds\",\r\n    \"Hearts\"\r\n]\r\n\r\nexport const FiguresPower = {\r\n    PAIR: 1,\r\n    TWO_PAIRS: 2,\r\n    THREE_OF_KIND: 3,\r\n    STREIGH: 4,\r\n    FLUSH: 5,\r\n    FULL_HOUSE: 6,\r\n    FOUR_OF_KIND: 7,\r\n}\r\n\r\n","export const generateCardsPath = (cardName) => (\r\n    `../../cards/${cardName}`\r\n)\r\n\r\nconst generateSourceTextures = (cardsNumber) => {\r\n    const sourceTexturesArray = []\r\n    for (let i = 0; i < cardsNumber; i++) {\r\n        sourceTexturesArray[i] = generateCardsPath(\"Default.png\")\r\n    }\r\n    return sourceTexturesArray\r\n}\r\n\r\nexport const addStore = () => {\r\n\r\n    const cardNames = [\"Clubs\", \"Diamonds\", \"Hearts\", \"Spades\"]\r\n    const cards = []\r\n    for (let i = 0; i < 4; i++) {\r\n        for (let j = 0; j < 13; j++) {\r\n            cards.push(cardNames[i] + \".\" + j)\r\n        }\r\n    }\r\n    cards.push(\"Default\")\r\n\r\n    const buttons = [\"PLACE\"]\r\n\r\n\r\n\r\n    const player1 = generateSourceTextures(2)\r\n    const player2 = generateSourceTextures(2)\r\n    const board = generateSourceTextures(5)\r\n    const ico = [\"../../textures/player.png\", \"../../textures/computer.png\"]\r\n\r\n    const store = {\r\n        cards: cards,\r\n        buttons: buttons,\r\n        player1: player1,\r\n        player2: player2,\r\n        board: board,\r\n        ico: ico,\r\n    }\r\n    return store\r\n}\r\n\r\n","const ifSame = (player1Card1, player1Card2, player2Card1, player2Card2, won) => {\r\n\r\n    let betterCardPlayer1\r\n    let worstCardPlayer1\r\n    let betterCardPlayer2\r\n    let worstCardPlayer2\r\n\r\n    if (player1Card1 > player1Card2) {\r\n        betterCardPlayer1 = player1Card1\r\n        worstCardPlayer1 = player1Card2\r\n    }\r\n    else if (player1Card1 < player1Card2) {\r\n        betterCardPlayer1 = player1Card2\r\n        worstCardPlayer1 = player1Card1\r\n    }\r\n    if (player2Card1 > player2Card2) {\r\n        betterCardPlayer2 = player2Card1\r\n        worstCardPlayer2 = player2Card2\r\n    }\r\n    else if (player2Card1 < player2Card2) {\r\n        betterCardPlayer2 = player2Card2\r\n        worstCardPlayer2 = player2Card1\r\n    }\r\n\r\n    if (player1Card1 === player1Card2) {\r\n        betterCardPlayer1 = player1Card1\r\n        worstCardPlayer1 = player1Card2\r\n    }\r\n    if (player2Card1 === player2Card2) {\r\n        betterCardPlayer2 = player2Card1\r\n        worstCardPlayer2 = player2Card2\r\n    }\r\n\r\n    if (betterCardPlayer1 > betterCardPlayer2) {\r\n        won = 1\r\n    }\r\n    else if (betterCardPlayer1 < betterCardPlayer2) {\r\n        won = 2\r\n    }\r\n    else if (betterCardPlayer1 === betterCardPlayer2) {\r\n        if (worstCardPlayer1 > worstCardPlayer2) {\r\n            won = 1\r\n        }\r\n        else if (worstCardPlayer1 < worstCardPlayer2) {\r\n            won = 2\r\n        }\r\n        else if (worstCardPlayer1 === worstCardPlayer2) {\r\n            won = 0\r\n        }\r\n    }\r\n    return won\r\n}\r\n\r\nexport const whoWon = (figure1, figure2, player1, player2) => {\r\n    let won = 0\r\n    const player1Card1 = player1[0].card\r\n    const player1Card2 = player1[1].card\r\n    const player2Card1 = player2[0].card\r\n    const player2Card2 = player2[1].card\r\n    const player1Figure1 = figure1[1]\r\n    const player1Figure2 = figure1[2]\r\n    const player2Figure1 = figure2[1]\r\n    const player2Figure2 = figure2[2]\r\n\r\n    if (figure1[0] > figure2[0]) { //------------ kto wygral\r\n        won = 1\r\n    }\r\n    else if (figure1[0] < figure2[0]) {\r\n        won = 2\r\n    }\r\n    else if (figure1.length === 0 && figure2.length !== 0) {\r\n        won = 2\r\n    }\r\n    else if (figure2.length === 0 && figure1.length !== 0) {\r\n        won = 1\r\n    }\r\n    else if (figure1.length === 0 && figure2.length === 0) {\r\n        won = ifSame(player1Card1, player1Card2, player2Card1, player2Card2, won)\r\n    }\r\n    else if (figure1[0] === figure2[0]) {//---------------------- takie same figury\r\n        if (figure1[0] === 1) {  //----------------------------- para\r\n            if (figure1[1] > figure2[1]) {\r\n                won = 1\r\n            }\r\n            else if (figure1[1] < figure2[1]) {\r\n                won = 2\r\n            }\r\n            else if (figure1[1] === figure2[1]) {\r\n                won = ifSame(player1Card1, player1Card2, player2Card1, player2Card2, won)\r\n            }\r\n        }\r\n        else if (figure1[0] === 2) {  //------------------------- dwie pary\r\n\r\n            if (player1Figure2 > player2Figure2) {\r\n                won = 1\r\n            }\r\n            else if (player1Figure2 < player2Figure2) {\r\n                won = 2\r\n            }\r\n            else if (player1Figure2 === player2Figure2) {\r\n                if (player1Figure1 > player2Figure1) {\r\n                    won = 1\r\n                }\r\n                else if (player1Figure1 < player2Figure1) {\r\n                    won = 2\r\n                }\r\n                else if (player1Figure1 === player2Figure1) {\r\n                    won = ifSame(player1Card1, player1Card2, player2Card1, player2Card2, won)\r\n                }\r\n            }\r\n        }\r\n        else if (figure1[0] === 3) {  //-----------------------------trojka\r\n            if (figure1[1] > figure2[1]) {\r\n                won = 1\r\n            }\r\n            else if (figure1[1] < figure2[1]) {\r\n                won = 2\r\n            }\r\n            else if (figure1[1] === figure2[1]) {\r\n                won = ifSame(player1Card1, player1Card2, player2Card1, player2Card2, won)\r\n            }\r\n        }\r\n        else if (figure1[0] === 4) {  //------------------------------street\r\n            if (figure1[1] > figure2[1]) {\r\n                won = 1\r\n            }\r\n            else if (figure1[1] < figure2[1]) {\r\n                won = 2\r\n            }\r\n            else if (figure1[1] === figure2[1]) {\r\n                won = ifSame(player1Card1, player1Card2, player2Card1, player2Card2, won)\r\n            }\r\n        }\r\n        else if (figure1[0] === 5) {  //------------------------------kolor\r\n            won = ifSame(player1Card1, player1Card2, player2Card1, player2Card2, won)\r\n        }\r\n        else if (figure1[0] === 6) {  //------------------------------ full\r\n\r\n            if (player1Figure1 > player2Figure1) {\r\n                won = 1\r\n            }\r\n            else if (player1Figure1 < player2Figure1) {\r\n                won = 2\r\n            }\r\n            else if (player1Figure1 === player2Figure1) {\r\n                if (player1Figure2 > player2Figure2) {\r\n                    won = 1\r\n                }\r\n                else if (player1Figure2 < player2Figure2) {\r\n                    won = 2\r\n                }\r\n                else if (player1Figure2 === player2Figure2) {\r\n                    won = ifSame(player1Card1, player1Card2, player2Card1, player2Card2, won)\r\n                }\r\n            }\r\n        }\r\n        else if (figure1[0] === 7) {  //--------------------------------kareta\r\n            if (figure1[1] > figure2[1]) {\r\n                won = 1\r\n            }\r\n            else if (figure1[1] < figure2[1]) {\r\n                won = 2\r\n            }\r\n            else if (figure1[1] === figure2[1]) {\r\n                won = ifSame(player1Card1, player1Card2, player2Card1, player2Card2, won)\r\n            }\r\n        }\r\n    }\r\n    return won\r\n}","import { generateCardsPath } from './addStoreItems'\r\nimport { whoWon } from './whoWon'\r\nimport { CardTypes, FiguresPower } from './consts'\r\n\r\nexport const addRandom = () => {\r\n    const player = []\r\n    const bot = []\r\n    const board = []\r\n    let repeat = 0\r\n\r\n    let randomCard = [[], [], [], [], [], [], [], [], []]\r\n\r\n    for (let i = 0; i < 9; i++) {\r\n        const randomType = CardTypes[Math.floor(Math.random() * 4)];\r\n        const randomFigure = Math.floor(Math.random() * 13);\r\n        for (let j = 0; j < randomCard.length; j++) {\r\n            if (randomType === randomCard[j][0] && randomFigure === randomCard[j][1]) {\r\n                repeat = 1\r\n                j = 10\r\n            }\r\n            else { repeat = 0 }\r\n        }\r\n        if (repeat === 0) {\r\n            randomCard[i][0] = randomType\r\n            randomCard[i][1] = randomFigure\r\n        }\r\n        else { i-- }\r\n    }\r\n\r\n    for (let i = 0; i < 9; i++) {\r\n        const x = randomCard[i][0]\r\n        if (i >= 0 && i < 2) {\r\n            player[i] = generateCardsPath(`${x}.${randomCard[i][1]}.png`)\r\n        }\r\n        else if (i >= 2 && i < 4) {\r\n            bot[i - 2] = generateCardsPath(`${x}.${randomCard[i][1]}.png`) // BOT ?\r\n        }\r\n        else if (i >= 4 && i < 9) {\r\n            board[i - 4] = generateCardsPath(`${x}.${randomCard[i][1]}.png`)\r\n        }\r\n    }\r\n\r\n    const commonCards = [\r\n        { type: randomCard[4][0], card: randomCard[4][1] },\r\n        { type: randomCard[5][0], card: randomCard[5][1] },\r\n        { type: randomCard[6][0], card: randomCard[6][1] },\r\n        { type: randomCard[7][0], card: randomCard[7][1] },\r\n        { type: randomCard[8][0], card: randomCard[8][1] }\r\n    ]\r\n\r\n    const player1 = [\r\n        { type: randomCard[0][0], card: randomCard[0][1] },\r\n        { type: randomCard[1][0], card: randomCard[1][1] },\r\n        ...commonCards\r\n    ]\r\n\r\n    const player2 = [\r\n        { type: randomCard[2][0], card: randomCard[2][1] },\r\n        { type: randomCard[3][0], card: randomCard[3][1] },\r\n        ...commonCards\r\n    ]\r\n\r\n    const figure1 = checkFigures(player1)\r\n    const figure2 = checkFigures(player2)\r\n    const won = whoWon(figure1, figure2, player1, player2)\r\n\r\n    const random = {\r\n        won: won,\r\n        player: player,\r\n        bot: bot,\r\n        board: board,\r\n    }\r\n    return random\r\n}\r\n\r\n\r\nconst handPush = (hand, repeatedFigures, power, handLength, fig1, fig2) => {\r\n    hand = []\r\n    hand[0] = power\r\n    if (handLength === 2) {\r\n        hand[1] = repeatedFigures[fig1]\r\n    }\r\n    else if (handLength === 3) {\r\n        hand[2] = repeatedFigures[fig2]\r\n    }\r\n    return hand\r\n}\r\n\r\nconst checkFigures = (player) => {\r\n    const repeatedCards = []\r\n    let hand = []\r\n    let pom = 0\r\n\r\n    const cardsNumbers = player.map(item => item.card)\r\n\r\n    for (let l = 0; l < 7; l++) {\r\n        for (let j = 0; j < 6; j++) {\r\n            if (cardsNumbers[j] > cardsNumbers[j + 1]) {\r\n                pom = cardsNumbers[j + 1]\r\n                cardsNumbers[j + 1] = cardsNumbers[j]\r\n                cardsNumbers[j] = pom\r\n            }\r\n        }\r\n    }\r\n\r\n    for (let k = 0; k < 7; k++) {\r\n        if (cardsNumbers[k] === cardsNumbers[k + 1]) {\r\n            k++\r\n            if (cardsNumbers[k] === cardsNumbers[k + 1]) {\r\n                k++\r\n                if (cardsNumbers[k] === cardsNumbers[k + 1]) {\r\n                    k++\r\n                    repeatedCards.push({ quantity: 4, figure: cardsNumbers[k] })\r\n                }\r\n                else {\r\n                    repeatedCards.push({ quantity: 4, figure: cardsNumbers[k] })\r\n                }\r\n            }\r\n            else {\r\n                repeatedCards.push({ quantity: 2, figure: cardsNumbers[k] })\r\n            }\r\n        }\r\n    }\r\n\r\n    const repeatedFigures = repeatedCards.map(({ figure }) => figure)\r\n\r\n    if (repeatedCards.length === 1) { //------------------------------------------ PARA\r\n        if (repeatedCards[0].quantity === 2) {\r\n            hand = handPush(hand, repeatedFigures, FiguresPower.PAIR, 2, 0, 0)\r\n        }\r\n    }\r\n    else if (repeatedCards.length === 2) {  //--------------------------------- DWIE PARY\r\n        if (repeatedCards[0].quantity === 2 && repeatedCards[1].quantity === 2) {\r\n            hand = handPush(hand, repeatedFigures, FiguresPower.TWO_PAIRS, 3, 0, 1)\r\n        }\r\n    }\r\n    else if (repeatedCards.length === 3) {\r\n        const handLength = 3\r\n        if (repeatedCards[0].quantity === 2 && repeatedCards[1].quantity === 2 && repeatedCards[2].quantity === 2) {\r\n            if (repeatedCards[0].figure < repeatedCards[1].figure) {\r\n                if (repeatedCards[0].figure < repeatedCards[2].figure) {\r\n                    hand = handPush(hand, repeatedFigures, FiguresPower.TWO_PAIRS, handLength, 1, 2)\r\n                }\r\n            }\r\n            else {\r\n                if (repeatedCards[1].figure < repeatedCards[2].figure) {\r\n                    hand = handPush(hand, repeatedFigures, FiguresPower.TWO_PAIRS, handLength, 0, 2)\r\n                }\r\n                else {\r\n                    hand = handPush(hand, repeatedFigures, FiguresPower.TWO_PAIRS, handLength, 0, 1)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (repeatedCards.length === 1) { //---------------------------------------- TROJKA\r\n        if (repeatedCards[0].quantity === 3) {\r\n            hand = handPush(hand, repeatedFigures, FiguresPower.THREE_OF_KIND, 2, 0, 0)\r\n        }\r\n    }\r\n    else if (repeatedCards.length === 2) {\r\n        if (repeatedCards[0].quantity === 3 && repeatedCards[1].quantity === 3) {\r\n            if (repeatedCards[0].figure > repeatedCards[1].figure) {\r\n                hand = handPush(hand, repeatedFigures, FiguresPower.THREE_OF_KIND, 2, 0, 0)\r\n            }\r\n            else {\r\n                hand = handPush(hand, repeatedFigures, FiguresPower.THREE_OF_KIND, 2, 1, 0)\r\n            }\r\n        }\r\n    }\r\n    let street = 0 //------------------------------------------------- STREET\r\n    for (let i = 0; i < 3; i++) {\r\n        street = 0\r\n        for (let j = 0; j < 5; j++) {\r\n            let nextCard = cardsNumbers[j + i] + 1\r\n            let nexterCard = cardsNumbers[j + i + 1]\r\n            if (nextCard === nexterCard) {\r\n                street++\r\n                if (street === 4) {\r\n                    hand = handPush(hand, repeatedFigures, FiguresPower.STREIGH, 1, 0, 0)\r\n                    hand[1] = cardsNumbers[j + i + 1]\r\n                }\r\n            }\r\n            else {\r\n                if (nextCard !== (nexterCard + 1)) {\r\n                    j = 5\r\n                }\r\n            }\r\n        }\r\n    }\r\n    let color = [0, 0, 0, 0] //----------------------------------------- KOLOR\r\n    for (let i = 0; i < 7; i++) {\r\n        for (let j = 0; j < 4; j++) {\r\n            if (player[i].type === j) {\r\n                color[j]++\r\n                if (color[j] === 5) {\r\n                    hand = handPush(hand, repeatedFigures, FiguresPower.FLUSH, 1, 0, 0)\r\n                }\r\n            }\r\n        }\r\n    }\r\n    if (repeatedCards.length === 2) { //----------------------------------------------- FULL\r\n        if (repeatedCards[0].quantity === 2 && repeatedCards[1].quantity === 3) {\r\n            hand = handPush(hand, repeatedFigures, FiguresPower.FULL_HOUSE, 3, 1, 0)\r\n        }\r\n        else if (repeatedCards[0].quantity === 3 && repeatedCards[1].quantity === 2) {\r\n            hand = handPush(hand, repeatedFigures, FiguresPower.FULL_HOUSE, 3, 0, 1)\r\n        }\r\n    }\r\n    if (repeatedCards.length === 3) {\r\n        if (repeatedCards[0].quantity === 2 && repeatedCards[1].quantity === 2 && repeatedCards[2].quantity === 3) {\r\n            if (repeatedCards[0].figure > repeatedCards[1].figure) {\r\n                hand = handPush(hand, repeatedFigures, FiguresPower.FULL_HOUSE, 3, 2, 0)\r\n            }\r\n            else {\r\n                hand = handPush(hand, repeatedFigures, FiguresPower.FULL_HOUSE, 3, 2, 1)\r\n            }\r\n        }\r\n        else if (repeatedCards[0].quantity === 2 && repeatedCards[1].quantity === 3 && repeatedCards[2].quantity === 2) {\r\n            if (repeatedCards[0].figure > repeatedCards[2].figure) {\r\n                hand = handPush(hand, repeatedFigures, FiguresPower.FULL_HOUSE, 3, 1, 0)\r\n            }\r\n            else {\r\n                hand = handPush(hand, repeatedFigures, FiguresPower.FULL_HOUSE, 3, 1, 2)\r\n            }\r\n        }\r\n        else if (repeatedCards[0].quantity === 3 && repeatedCards[1].quantity === 2 && repeatedCards[2].quantity === 2) {\r\n            if (repeatedCards[1].figure > repeatedCards[2].figure) {\r\n                hand = handPush(hand, repeatedFigures, FiguresPower.FULL_HOUSE, 3, 0, 1)\r\n            }\r\n            else {\r\n                hand = handPush(hand, repeatedFigures, FiguresPower.FULL_HOUSE, 3, 0, 2)\r\n            }\r\n        }\r\n    }\r\n    if (repeatedCards.length === 1) { //----------------------------------------------- KARETA\r\n        if (repeatedCards[0].quantity === 4) {\r\n            hand = handPush(hand, repeatedFigures, FiguresPower.FOUR_OF_KIND, 2, 0, 0)\r\n        }\r\n    }\r\n    else if (repeatedCards.length === 2) {\r\n        if (repeatedCards[0].quantity === 4 && repeatedCards[1].quantity === 2) {\r\n            hand = handPush(hand, repeatedFigures, FiguresPower.FOUR_OF_KIND, 2, 0, 0)\r\n        }\r\n        else if (repeatedCards[0].quantity === 2 && repeatedCards[1].quantity === 4) {\r\n            hand = handPush(hand, repeatedFigures, FiguresPower.FOUR_OF_KIND, 2, 1, 0)\r\n        }\r\n        else if (repeatedCards[0].quantity === 4 && repeatedCards[1].quantity === 3) {\r\n            hand = handPush(hand, repeatedFigures, FiguresPower.FOUR_OF_KIND, 2, 0, 0)\r\n        }\r\n        if (repeatedCards[0].quantity === 3 && repeatedCards[1] === 4) {\r\n            hand = handPush(hand, repeatedFigures, FiguresPower.FOUR_OF_KIND, 2, 1, 0)\r\n        }\r\n    }\r\n    return hand\r\n}","import { handleActions } from 'redux-actions'\r\nimport produce from 'immer'\r\n\r\nimport { ACTIONS } from './consts'\r\nimport { addStore } from \"./addStoreItems\"\r\nimport { addRandom } from \"./addRandom\"\r\n\r\nconst store = addStore()\r\nconst random = addRandom()\r\n\r\nconst defaultState = {\r\n    cards: store.cards,\r\n\r\n    boardCards: store.board,\r\n    player1Cards: store.player1,\r\n    player2Cards: store.player2,\r\n\r\n    playersIco: store.ico,\r\n    playerCash: [1000, 1000],\r\n    playerMinus: [0, 0],\r\n    pool: 0,\r\n\r\n    buttonsColors: [\"../../textures/ringBlue.png\"],\r\n    buttonsNames: store.buttons,\r\n    round: 1,\r\n    inputNames: [5, 20, 50, 100, 300, 500],\r\n\r\n    randPlayer: random.player,\r\n    randBot: random.bot,\r\n    randBorad: random.board,\r\n    won: random.won,\r\n}\r\n\r\nconst poolRounds = [2, 3, 4, 5]\r\nconst buttonsName = [\"PLACE\", \"GO\", \"GO\", \"GO\", \"GO\", \"NEXT\"]\r\n\r\nconst newRound = (draft) => {\r\n    if (draft.won === 0) {\r\n        draft.playerCash[0] += draft.pool / 2\r\n        draft.playerCash[1] += draft.pool / 2\r\n    }\r\n    else if (draft.won === 1) {\r\n        draft.playerCash[0] += draft.pool\r\n    }\r\n    else if (draft.won === 2) {\r\n        draft.playerCash[1] += draft.pool\r\n    }\r\n    draft.playerMinus[0] = 0\r\n    draft.playerMinus[1] = 0\r\n    const random = addRandom()\r\n    draft.randPlayer = random.player\r\n    draft.randBot = random.bot\r\n    draft.randBorad = random.board\r\n    draft.boardCards = store.board\r\n    draft.player1Cards = store.player1\r\n    draft.player2Cards = store.player2\r\n    draft.won = random.won\r\n    draft.pool = 0\r\n}\r\n\r\nconst samePool = (draft) => {\r\n    if (draft.playerMinus[0] > draft.playerMinus[1]) {\r\n        const difference = draft.playerMinus[0] - draft.playerMinus[1]\r\n        draft.playerCash[1] -= difference\r\n        draft.playerMinus[1] += difference\r\n        draft.pool += difference\r\n    }\r\n    else if (draft.playerMinus[1] > draft.playerMinus[0]) {\r\n        const difference = draft.playerMinus[1] - draft.playerMinus[0]\r\n        draft.playerCash[0] -= difference\r\n        draft.playerMinus[0] += difference\r\n        draft.pool += difference\r\n    }\r\n}\r\n\r\nconst addPool = (draft, player, prize) => {\r\n    draft.pool += prize\r\n    draft.playerCash[player] -= prize\r\n    draft.playerMinus[player] += prize\r\n}\r\n\r\nconst botPoolAdd = (draft) => {\r\n    let prize = Math.floor(Math.random() * 15);\r\n    prize *= 5\r\n    addPool(draft, 1, prize)\r\n}\r\n\r\nexport const reducer = handleActions({\r\n    [ACTIONS.CHANGE_BUTTON]: (state, { payload }) =>\r\n        produce(state, draft => {\r\n            draft.buttonsNames = buttonsName[payload]\r\n            samePool(draft)\r\n\r\n            switch (payload) {\r\n                case 0:\r\n                    newRound(draft)\r\n                    break;\r\n                case 1:\r\n                    draft.player1Cards = draft.randPlayer\r\n                    addPool(draft, 0, 50)\r\n                    addPool(draft, 1, 50)\r\n                    break;\r\n                case 2:\r\n                    draft.boardCards[0] = draft.randBorad[0]\r\n                    draft.boardCards[1] = draft.randBorad[1]\r\n                    draft.boardCards[2] = draft.randBorad[2]\r\n                    botPoolAdd(draft)\r\n                    break;\r\n                case 3:\r\n                    draft.boardCards[3] = draft.randBorad[3]\r\n                    botPoolAdd(draft)\r\n                    break;\r\n                case 4:\r\n                    draft.boardCards[4] = draft.randBorad[4]\r\n                    botPoolAdd(draft)\r\n                    break;\r\n                case 5:\r\n                    draft.player2Cards = draft.randBot\r\n                    break;\r\n                default:\r\n                // do nothing\r\n            }\r\n        }),\r\n    [ACTIONS.CHANGE_ROUND]: (state, { payload }) =>\r\n        produce(state, draft => {\r\n            if (payload !== 5) {\r\n                draft.round = payload + 1\r\n            }\r\n            else { draft.round = 0 }\r\n        }),\r\n\r\n    [ACTIONS.CHANGE_POOL]: (state, { payload }) =>\r\n        produce(state, draft => {\r\n            if (poolRounds.includes(payload.round)) {\r\n                addPool(draft, 0, payload.value)\r\n            }\r\n        }),\r\n\r\n    [ACTIONS.PASS_ROUND]: (state,) =>\r\n        produce(state, draft => {\r\n            draft.round = 1\r\n            draft.buttonsNames = buttonsName[0]\r\n            draft.playerCash[1] += draft.pool\r\n            draft.playerMinus[0] = 0\r\n            draft.playerMinus[1] = 0\r\n            const random = addRandom()\r\n            draft.randPlayer = random.player\r\n            draft.randBot = random.bot\r\n            draft.randBorad = random.board\r\n            draft.boardCards = store.board\r\n            draft.player1Cards = store.player1\r\n            draft.player2Cards = store.player2\r\n            draft.won = random.won\r\n            draft.pool = 0\r\n        }),\r\n}, defaultState)\r\n","import React from \"react\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        marginLeft: \"0px\",\r\n        textAlign: \"center\",\r\n        fontSize: \"25px\",\r\n        color: \"#4A82AD\",\r\n        width: \"100%\",\r\n        fontFamily: \"Rockwell\"\r\n    },\r\n});\r\n\r\nexport const Buton = ({ text, onClick, }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Button className={classes.button} onClick={onClick} > {text} </Button>\r\n    )\r\n}","import React from \"react\"\r\nimport { makeStyles } from '@material-ui/core/styles'\r\nimport Grid from '@material-ui/core/Grid'\r\n\r\nimport { Buton } from \"../../components/button\"\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        position: \"fixed\",\r\n        right: \"5%\",\r\n        backgroundColor: \"#B3AA66\",\r\n        float: \"left\",\r\n        boxShadow: '0 1px 5px 2px rgba(0, 0, 0, .9)',\r\n        borderRadius: 7,\r\n        fontSize: \"25px\",\r\n        width: \"10%\"\r\n    },\r\n    buttonPlace: {\r\n        top: \"20%\",\r\n    },\r\n    buttonPass: {\r\n        top: \"40%\",\r\n    }\r\n});\r\n\r\n\r\nexport const ButtonPanelComponent = ({ buttonPlaceName, ChangeRound, round, ChangeButton, PassButton }) => {\r\n    const classes = useStyles();\r\n    const onButtonPlaceClick = () => {\r\n        ChangeRound(round)\r\n        ChangeButton(round)\r\n    }\r\n    const onButtonPassClick = () => {\r\n        PassButton()\r\n    }\r\n\r\n    return (\r\n        <Grid>\r\n            <Grid className={`${classes.button} ${classes.buttonPlace}`}>\r\n                <Buton\r\n                    onClick={onButtonPlaceClick}\r\n                    text={buttonPlaceName}\r\n                />\r\n            </Grid >\r\n            <Grid className={`${classes.button} ${classes.buttonPass}`}>\r\n                <Buton\r\n                    text={\"PASS\"}\r\n                    onClick={onButtonPassClick}\r\n                />\r\n            </Grid >\r\n        </Grid>\r\n    )\r\n}\r\n","import { createAction } from 'redux-actions'\r\n\r\nimport { ACTIONS } from './consts'\r\n\r\nexport const actions = {\r\n    changeButton: createAction(ACTIONS.CHANGE_BUTTON, data => data),\r\n    changeRound: createAction(ACTIONS.CHANGE_ROUND, data => data),\r\n    changePool: createAction(ACTIONS.CHANGE_POOL, data => data),\r\n    passRound: createAction(ACTIONS.PASS_ROUND, data => data),\r\n}","import { useDispatch } from \"react-redux\"\r\nimport { actions } from \"../../store/actions\"\r\n\r\nexport const useChangeRound = () => {\r\n    const dispatch = useDispatch()\r\n    const changeRound = round => dispatch(actions.changeRound(round))\r\n    return changeRound\r\n}\r\n\r\nexport const useChangeButton = () => {\r\n    const dispatch = useDispatch()\r\n    const changeButton = round => dispatch(actions.changeButton(round))\r\n    return changeButton\r\n}\r\n\r\nexport const usePassButton = () => {\r\n    const dispatch = useDispatch()\r\n    const passButton = () => dispatch(actions.passRound())\r\n    return passButton\r\n}","import React from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\n\r\nimport { ButtonPanelComponent } from \"./buttonPanelComponent\"\r\nimport { useChangeRound, useChangeButton, usePassButton } from \"./buttonPanelHooks\"\r\n\r\nexport const ButtonPanelContainer = () => {\r\n    const reduxProps = {\r\n        buttonPlaceName: useSelector(store => store.buttonsNames),\r\n        round: useSelector(store => store.round)\r\n    }\r\n    const hooksProps = {\r\n        ChangeRound: useChangeRound(),\r\n        ChangeButton: useChangeButton(),\r\n        PassButton: usePassButton()\r\n    }\r\n\r\n    return (\r\n        <ButtonPanelComponent\r\n            {...reduxProps}\r\n            {...hooksProps}\r\n        />\r\n    )\r\n}","import React from \"react\"\r\nimport { makeStyles } from '@material-ui/core/styles'\r\n\r\nconst useStyles = makeStyles({\r\n    image: {\r\n        width: \"90%\",\r\n        minWidth: \"50px\"\r\n    }\r\n});\r\n\r\nexport const Card = (source) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <img className={classes.image} src={source.source} alt=\"cardPicture\" />\r\n    )\r\n}","import React from \"react\"\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { Card } from \"./card\"\r\n\r\nexport const CardsComponent = ({ storeCards }) => {\r\n\r\n    return (\r\n        <Grid\r\n            container\r\n            direction=\"row\"\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            xs=\"12\">\r\n            {\r\n                storeCards.map((val, index) => (\r\n                    <Grid xs=\"2\"\r\n                        key={index}\r\n                        container\r\n                        direction=\"row\"\r\n                        justify=\"center\"\r\n                        alignItems=\"center\"\r\n                    >\r\n                        <Card source={val} />\r\n                    </Grid>\r\n                ))\r\n            }\r\n        </Grid>\r\n    )\r\n}","import React from \"react\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { CardsComponent } from \"../../components/cardsList\"\r\n\r\nconst useStyles = makeStyles({\r\n    board: {\r\n        textAlign: \"center\",\r\n        position: \"fixed\",\r\n        height: \"60%\",\r\n        top: \"20%\",\r\n        width: \"60%\",\r\n        left: \"20%\",\r\n        flexGrow: 1,\r\n        flexWrap: \"wrap\",\r\n        display: \"flex\",\r\n        backgroundColor: \"#B3AA66\",\r\n        boxShadow: '0 1px 5px 2px rgba(0, 0, 0, .9)',\r\n        borderRadius: 7,\r\n    },\r\n    cardsContainer: {\r\n        textAlign: 'center',\r\n        maxHeight: \"33%\",\r\n        position: \"relative\",\r\n    },\r\n});\r\n\r\nconst DefaultGrid = ({ children, className }) => (\r\n    <Grid xs=\"8\" className={className}>{children}</Grid>\r\n)\r\n\r\n\r\nexport const BoardComponent = ({ listPlayer2, listPlayer1, boardCards }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid\r\n            justify=\"center\"\r\n            alignItems=\"center\"\r\n            xs=\"12\" className={classes.board}\r\n        >\r\n            <DefaultGrid className={classes.cardsContainer}>\r\n                <CardsComponent storeCards={listPlayer2} />\r\n            </DefaultGrid>\r\n            <DefaultGrid className={classes.cardsContainer} >\r\n                <CardsComponent storeCards={boardCards} />\r\n            </DefaultGrid>\r\n            <DefaultGrid className={classes.cardsContainer}>\r\n                <CardsComponent storeCards={listPlayer1} />\r\n            </DefaultGrid>\r\n        </Grid>\r\n\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport { useSelector } from \"react-redux\"\r\n\r\nimport { BoardComponent } from \"./boardComponent\"\r\n\r\nexport const BoardContainer = () => {\r\n    const listPlayer2 = useSelector(store => store.player2Cards)\r\n    const listPlayer1 = useSelector(store => store.player1Cards)\r\n    const boardCards = useSelector(store => store.boardCards)\r\n\r\n    return (\r\n        <BoardComponent\r\n            listPlayer2={listPlayer2}\r\n            listPlayer1={listPlayer1}\r\n            boardCards={boardCards}\r\n        />\r\n    )\r\n}","import React from \"react\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nconst useStyles = makeStyles({\r\n    text: {\r\n        marginLeft: \"0px\",\r\n        textAlign: \"center\",\r\n        fontSize: \"25px\",\r\n        width: \"100%\",\r\n        fontFamily: \"Rockwell\"\r\n    },\r\n    textPool: {\r\n        color: \"#4A82AD\",\r\n    },\r\n    textDebt: {\r\n        color: \"#B44B6A\",\r\n    },\r\n    root: {\r\n        maxWidth: \"400px\",\r\n        width: \"100%\",\r\n        marginTop: \"10px\",\r\n        marginBottom: \"10px\",\r\n    },\r\n});\r\n\r\nexport const TextLabel = ({ text, value, value2 }) => {\r\n    const classes = useStyles();\r\n\r\n    return (\r\n        <Grid className={classes.root} >\r\n            <Typography className={classes.text}> {text} </Typography>\r\n            <Typography className={`${classes.text} ${classes.textPool}`}> {value} $ </Typography>\r\n            <Typography className={`${classes.text} ${classes.textDebt}`}> {value2} </Typography>\r\n        </Grid>\r\n    )\r\n}","import React from \"react\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport Button from '@material-ui/core/Button';\r\n\r\nconst useStyles = makeStyles({\r\n    button: {\r\n        marginLeft: \"0px\",\r\n        textAlign: \"center\",\r\n        fontSize: \"20px\",\r\n        color: \"#4A82AD\",\r\n        width: \"100%\",\r\n        fontFamily: \"Rockwell\",\r\n        minWidth: \"88px\"\r\n    },\r\n    root: {\r\n        maxWidth: \"400px\",\r\n        width: \"100%\",\r\n    },\r\n});\r\n\r\nexport const InputLabel = ({ text, value, changepool, round, addValue }) => {\r\n    const classes = useStyles();\r\n    const data = {\r\n        round: round,\r\n        value: addValue\r\n    }\r\n    const changePool = () => {\r\n        changepool(data)\r\n    }\r\n\r\n    return (\r\n        <Grid item xs=\"8\" sm=\"8\" className={classes.root} >\r\n            <Button className={classes.button} onClick={changePool} > + {addValue} $ </Button>\r\n        </Grid>\r\n    )\r\n}","import React from \"react\"\r\nimport { makeStyles } from '@material-ui/core/styles';\r\nimport Grid from '@material-ui/core/Grid';\r\n\r\nimport { TextLabel } from \"../../components/textLabel\"\r\nimport { InputLabel } from \"../../components/inputLabel\"\r\n\r\nconst useStyles = makeStyles({\r\n    pool: {\r\n        position: \"fixed\",\r\n        left: \"5%\",\r\n        backgroundColor: \"#B3AA66\",\r\n        float: \"left\",\r\n        top: \"20%\",\r\n        boxShadow: '0 1px 5px 2px rgba(0, 0, 0, .9)',\r\n        borderRadius: 7,\r\n        fontSize: \"25px\",\r\n        width: \"10%\"\r\n    },\r\n    player1Cash: {\r\n        position: \"fixed\",\r\n        left: \"45%\",\r\n        backgroundColor: \"#B3AA66\",\r\n        float: \"left\",\r\n        bottom: \"3%\",\r\n        boxShadow: '0 1px 5px 2px rgba(0, 0, 0, .9)',\r\n        borderRadius: 7,\r\n        width: \"10%\",\r\n        minWidth: \"77px\"\r\n    },\r\n    player2Cash: {\r\n        position: \"fixed\",\r\n        left: \"45%\",\r\n        backgroundColor: \"#B3AA66\",\r\n        float: \"left\",\r\n        top: \"3%\",\r\n        boxShadow: '0 1px 5px 2px rgba(0, 0, 0, .9)',\r\n        borderRadius: 7,\r\n        width: \"10%\",\r\n        minWidth: \"77px\"\r\n    },\r\n    poolAdd: {\r\n        position: \"fixed\",\r\n        left: \"5%\",\r\n        backgroundColor: \"#B3AA66\",\r\n        float: \"left\",\r\n        top: \"40%\",\r\n        boxShadow: '0 1px 5px 2px rgba(0, 0, 0, .9)',\r\n        borderRadius: 7,\r\n        fontSize: \"25px\",\r\n        width: \"10%\"\r\n    },\r\n    player1Icon: {\r\n        position: \"fixed\",\r\n        top: \"3%\",\r\n        left: \"58%\",\r\n        width: \"100px\"\r\n    },\r\n    player2Icon: {\r\n        position: \"fixed\",\r\n        bottom: \"2%\",\r\n        left: \"58%\",\r\n        width: \"100px\"\r\n    },\r\n});\r\n\r\nexport const BorderComponent = ({\r\n    pool,\r\n    round,\r\n    changePool,\r\n    inputNames,\r\n    player1Cash,\r\n    player2Cash,\r\n    player1Debt,\r\n    player2Debt,\r\n    playerIconSrc1,\r\n    playerIconSrc2\r\n}) => {\r\n    const classes = useStyles();\r\n    return (\r\n        <>\r\n            <Grid className={classes.pool}>\r\n                <TextLabel text=\"POOL\" value={pool} />\r\n            </Grid>\r\n            <Grid className={classes.player1Cash}>\r\n                <TextLabel value={player1Cash} value2={player1Debt} />\r\n            </Grid>\r\n\r\n            <Grid className={classes.player2Cash}>\r\n                <TextLabel value={player2Cash} value2={player2Debt} />\r\n            </Grid>\r\n\r\n            <img src={playerIconSrc2} alt=\"gracz\" className={classes.player1Icon} />\r\n            <img src={playerIconSrc1} alt=\"gracz\" className={classes.player2Icon} />\r\n\r\n            <Grid className={classes.poolAdd}>\r\n                {\r\n                    inputNames.map((val, index) => (\r\n                        <InputLabel\r\n                            kay={index}\r\n                            changepool={changePool}\r\n                            round={round}\r\n                            addValue={val}\r\n                        />\r\n                    ))\r\n                }\r\n            </Grid>\r\n        </>\r\n    )\r\n}\r\n","import React from \"react\"\r\nimport { useSelector, useDispatch } from \"react-redux\"\r\n\r\nimport { BorderComponent } from \"./borderComponent\"\r\nimport { actions } from \"../../store/actions\"\r\n\r\nconst useChangePool = () => {\r\n    const dispatch = useDispatch()\r\n    const changePool = date => dispatch(actions.changePool(date))\r\n    return changePool\r\n}\r\n\r\nexport const BorderContainer = () => {\r\n    const borderProps = {\r\n        playerIconSrc1: useSelector(store => store.playersIco[0]),\r\n        playerIconSrc2: useSelector(store => store.playersIco[1]),\r\n        player1Cash: useSelector(store => store.playerCash[0]),\r\n        player2Cash: useSelector(store => store.playerCash[1]),\r\n        player1Debt: `- ${useSelector(store => store.playerMinus[0])} $`,\r\n        player2Debt: `- ${useSelector(store => store.playerMinus[1])} $`,\r\n        pool: useSelector(store => store.pool),\r\n        round: useSelector(store => store.round),\r\n        inputNames: useSelector(store => store.inputNames),\r\n    }\r\n    const changePool = useChangePool()\r\n\r\n    return <BorderComponent {...borderProps} changePool={changePool} />\r\n}\r\n","import React from 'react'\r\nimport ReactDOM from 'react-dom'\r\n\r\nimport { Provider } from 'react-redux'\r\nimport { configureStore } from './store'\r\nimport { App } from './App'\r\n\r\nconst rootElement = document.getElementById('root')\r\nReactDOM.render(\r\n    <Provider store={configureStore()}>\r\n        <App />\r\n    </Provider>,\r\n    rootElement\r\n)\r\n\r\n","import { createStore, applyMiddleware } from 'redux'\r\nimport { composeWithDevTools } from 'redux-devtools-extension'\r\n\r\nimport { reducer } from './reducers'\r\n\r\nexport const configureStore = () => {\r\n    return createStore(\r\n        reducer, composeWithDevTools(applyMiddleware())\r\n    );\r\n}","import React from 'react'\r\nimport { ButtonPanelContainer } from \"./pages/buttonPanel/buttonPanelContainer\"\r\nimport { BoardContainer } from \"./pages/board/boardContainer\"\r\nimport { BorderContainer } from \"./pages/border/borderContainer\"\r\n\r\nexport const App = () => {\r\n    return (\r\n        <div>\r\n            <ButtonPanelContainer />\r\n            <BoardContainer />\r\n            <BorderContainer />\r\n        </div>\r\n    )\r\n}\r\n"],"sourceRoot":""}